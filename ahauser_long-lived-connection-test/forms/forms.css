:root {
    /* GREEN for success messages or positive Confirmations. */
    --green-100: hsl(144, 100%, 95%);
    --green-200: hsl(144, 100%, 81.25%);
    --green-300: hsl(144, 100%, 67.5%);
    --green-400: hsl(144, 100%, 53.75%);
    --green-500: hsl(144, 100%, 40%);
    --green-600: hsl(144, 100%, 35%);
    --green-700: hsl(144, 100%, 30%);
    --green-800: hsl(144, 100%, 25%);
    --green-900: hsl(144, 100%, 20%);

    /* YELLOW/ORANGE for warning messages. */
    --yellow-100: hsl(38, 99%, 95%);
    --yellow-200: hsl(38, 99%, 83%);
    --yellow-300: hsl(38, 99%, 71%);
    --yellow-400: hsl(38, 99%, 59%);
    --yellow-500: hsl(38, 99%, 47%);
    --yellow-600: hsl(38, 99%, 40.25%);
    --yellow-700: hsl(38, 99%, 33.5%);
    --yellow-800: hsl(38, 99%, 26.75%);
    --yellow-900: hsl(38, 99%, 20%);

    /* RED for error messages. */
    --red-100: hsl(357, 82%, 95%);
    --red-200: hsl(357, 82%, 84.25%);
    --red-300: hsl(357, 82%, 73.5%);
    --red-400: hsl(357, 82%, 62.75%);
    --red-500: hsl(357, 82%, 52%);
    --red-600: hsl(357, 82%, 44%);
    --red-700: hsl(357, 82%, 36%);
    --red-800: hsl(357, 82%, 28%);
    --red-900: hsl(357, 82%, 20%);

    /* BLUE for neutral informational related messages. */
    --blue-100: hsl(220, 84%, 95%);
    --blue-200: hsl(220, 84%, 84%);
    --blue-300: hsl(220, 84%, 73%);
    --blue-400: hsl(220, 84%, 62%);
    --blue-500: hsl(220, 84%, 51%);
    --blue-600: hsl(220, 84%, 43.25%);
    --blue-700: hsl(220, 84%, 35.5%);
    --blue-800: hsl(220, 84%, 27.75%);
    --blue-900: hsl(220, 84%, 20%);

    /* Neutral color properties */
    --grey-100: hsl(0, 0%, 90%);
    --grey-200: hsl(0, 0%, 80%);
    --grey-300: hsl(0, 0%, 70%);
    --grey-400: hsl(0, 0%, 60%);
    --grey-500: hsl(0, 0%, 50%);
    --grey-600: hsl(0, 0%, 40%);
    --grey-700: hsl(0, 0%, 30%);
    --grey-800: hsl(0, 0%, 20%);
    --grey-900: hsl(0, 0%, 10%);


    --input-border: #8b8a8b;
    /* --input-focus-h: 245;
    --input-focus-s: 100%;
    --input-focus-l: 42%; */
    --default-color: #8b8a8b;
    --disabled-color-border: #ccc;
    --disabled-color-background: #eee;
    --accent-error: #ff0033;
    --select-border: #777;
    --select-focus: var(--color-secondary-240);
    --select-arrow: var(--select-border);
    --formControl-color: purple;
    --formControl-disabled: #959495;

    --form-field-width: 30ch;
    --form-field-border-radius: 0.25em;

    --minField-col-width: 20ch;
    --minField-width: 10ch;

}

/* css reset code for text and textarea input types START*/

*,
*:before,
*:after {
    box-sizing: border-box;
}

input[type="file"] {
    font-size: 0.9em;
    padding-top: 0.35rem;
}

.formField[readonly] {
    border-style: dotted;
    cursor: not-allowed;
    color: #777;
}

.input[disabled] {
    border: 1px solid var(--input-border);
    background-color: #eee;
    cursor: not-allowed;
}


textarea.input {
    resize: vertical;

    overflow: auto;
    /* padding: .5rem; */
    border: 1px solid var(--input-border);
    font-family: Arial, sans-serif;
    font-size: .85rem;

}

/* modern web dev refactor above */


.formField {
    background-color: #fff;
    border: 2px solid var(--input-border);
    border-radius: var(--form-field-border-radius, 0.25em);
    padding: 0.25em 0.5em;
    /* these values are inherited from the :root location */
    font-family: inherit;
    font-family: inherit;
    /* IOS text zoom prevention  */
    /* fallback */
    font-size: 16px;
    font-size: max(16px, 1em);
    max-width: 100%;
    width: var(--form-field-width, 30ch);
}

.formField:not(textarea):not(.select--multiple) {
    line-height: 1;
    height: 2.25rem;
}

/* .formField select {
    appearance: none;
    background-color: transparent;
    border: none;
    padding: 0 1m 0 0;
    margin: 0;
    width: 100%;

    font-family: inherit;
    font-size: inherit;
    color: inherit;
    cursor: inherit;
    line-height: inherit;
    outline: none;
} */

/* this removes the dropdown arrow in IE10 & IE11 */
.formField::-ms-expand {
    display: none;
}

fieldset {
    margin: 0;
}

legend {
    padding: 0;
}

/* css reset code for text and textarea input types END*/


.formGroup {
    /* if adding anything make sure to test slowly */
    /* padding: 1em; */
}

.formGroup+.formGroup {
    margin-top: .5em;
}

.formGroup label {
    display: block;
    font-size: 1.15em;
    font-weight: 500;
    line-height: 1;
    color: var(--color-neutral-310);
}

.formGroup label+.formField {
    margin-top: 0.125em;
}

.formField {
    /* WCAG guidelines state that the border color and the background must meet a 3:1 contrast ratio */
    border-color: var(--default-color);
}

.formField:focus {
    /* WCAG guidelines state that the border-color and the border-color when focused must meet a 3:1 contrast ratio */
    border-color: var(--color-secondary-240);
    box-shadow: 0 0 0 1.5px var(--color-secondary-220);
    outline: 3px solid transparent;
}


.formField:disabled {
    /* WCAG guidelines state that the border-color and the border-color when focused must meet a 3:1 contrast ratio */

    /* NB--> screen readers and keyboards are not able to interact with disabled input elements */
    border-color: var(--disabled-color-border);
    background-color: var(--disabled-color-background);
    color: rgba(black, 0.45);
    cursor: not-allowed;
}

.legend-title {
    font-weight: bold;
    font-size: 1.5rem;
    margin-bottom: 0.65em;
    color: var(--color-secondary-200);
    border: 1px solid var(--color-secondary-200);
}

fieldset {
    border: 1px solid var(--color-secondary-200);
    padding: 1rem;
}

fieldset+fieldset {
    margin-top: 1rem;
    margin-bottom: 1rem;
}

section+section {
    margin-top: 2rem;
}

/* the initial state of our formRow class is a Grid that creates columns of equal width that are intrinsicly responsive ased on the value of the '--minField-col-width' css variable.*/
.formRow {
    display: grid;
    grid-gap: 2rem;

    /* the value assigned to the grid-template-columns property uses the 'repeat()' function and the auto-fit keyword which makes the grid algorithm add columns as needed.  The 'minmax()' function is passed a css variable equal to 20ch which is the 'minimum allowed value' parameter and '1fr' as the 'maximum allowed value' parameter.  Once the formfields hit the minimum of 20ch the Grid algorithm drops those fields to their own row.  */
    grid-template-columns: repeat(auto-fit,
            minmax(var(--minField-col-width), 1fr));
}

.formRow .formGroup {
    margin: 0;
}

.formRow .formField {
    width: 100%;
}

.formRow+.formRow {
    margin-top: 2rem;
}

.formRow--mixed {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
}

/* the "formRow--mixed" class is a modifier class that allows a mixed variety of field widths.  In this example another css variable was used to set the minimum width of the zip code field while its sibling 'formGroup' class divs were set to another css variable*/
.formRow--mixed .formGroup {
    flex: 1 1 var(--minField-col-width);
}

.formRow--mixed .formGroup--width-auto {
    flex: 0 1 auto;
}

.formRow--mixed .formGroup--width-auto .formField,
.formRow--mixed .formGroup--width-auto .formControl {
    max-width: var(--minField-width, 0);
}

/* this '.formRow--variable' class allowed its child elements to take on a variable width.  This is used in addition to the formRow class on the parent of the div with class name "formGroup" */
.formRow--variable {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
}

.fieldDescription {
    display: block;
    margin-top: 0.5em;
    opacity: 0.75;
    letter-spacing: 0.015em;
    font-size: 0.9rem;
}

.fieldError {
    --field-focus: var(--accent-error);
    color: var(--accent-error);
}

.fieldError .formControl {
    --default-color: var(--accent-error);
}

.fieldError .fieldDescription {
    display: flex;
    align-items: center;
    opacity: 1;
}

.fieldError .fieldDescription:before {
    content: "";
    width: 0.8em;
    height: 0.8em;
    margin-right: 0.5em;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50' stroke='#{svgColor(error)}' stroke-width='10' stroke-linecap='round'%3E%3Cdefs/%3E%3Cpath d='M5 5l40 40M45 5L5 45'/%3E%3C/svg%3E");
}


/* css reset code for select input types START*/

select {
    /* A reset of styles, including removing the default dropdown arrow */
    appearance: none;
    /* Additional resets for further consistency */
    background-color: transparent;
    border: none;
    padding: 0 1em 0 0;
    margin: 0;
    width: 100%;
    font-family: inherit;
    font-size: inherit;
    cursor: inherit;
    line-height: inherit;

    /* Stack above custom arrow */
    z-index: 1;

    outline: none;

}


/* removes the arrow for lower IE versions */
select::-ms-expand {
    display: none;
}

/* css reset code for select input types END*/

.select {
    width: 100%;
    /* The min-width and max-width values are mostly for this demo, and you may choose to drop or alter it for your use case. */
    min-width: 15ch;
    max-width: 30ch;

    border: 1px solid var(--select-border);
    border-radius: 0.25em;
    padding: 0.25em 0.5em;

    font-size: 1.25rem;
    cursor: pointer;
    line-height: 1.1;

    /* Optional styles - remove for transparency */
    background-color: #fff;
    background-image: linear-gradient(to top, #f9f9f9, #fff 33%);

    display: grid;
    grid-template-areas: "select";
    align-items: center;
    position: relative;

}

.select::after {
    content: "";
    width: 0.8em;
    height: 0.5em;
    background-color: var(--select-arrow);
    clip-path: polygon(100% 0%, 0 0%, 50% 100%);
    justify-self: end;

}

select,
.select:after {
    grid-area: select;
}

select:focus+.focus {
    position: absolute;
    top: -1px;
    left: -1px;
    right: -1px;
    bottom: -1px;
    border: 2px solid var(--select-focus);
    border-radius: inherit;
}

.select:not(.select--multiple)::after {
    content: "";
    justify-self: end;
    width: 0.8em;
    height: 0.5em;
    background-color: var(--select-arrow);
    clip-path: polygon(100% 0%, 0 0%, 50% 100%);
}

select[multiple] {
    padding-right: 0;
    height: 6rem;
}

select[multiple] option {
    white-space: normal;
    outline-color: var(--select-focus);
}

.select--disabled {
    cursor: not-allowed;
    background-color: #eee;
    background-image: linear-gradient(to top, #ddd, #eee 33%);
}

.select+label {
    margin-top: 2rem;
}

/* css reset code for checkbox input types START*/

/* this class targets labels of checkboxes */
.formControl {
    font-family: system-ui, sans-serif;
    font-size: .85rem;
    font-weight: bold;
    line-height: 1.1;
    display: grid;
    grid-template-columns: 1em auto;
    gap: 0.5em;
}

input[type="checkbox"] {
    /* Add if not using autoprefixer */
    -webkit-appearance: none;
    appearance: none;
    /* For iOS < 15 to remove gradient background */
    background-color: #fff;
    /* Not removed via appearance */
    margin: 0;

    font: inherit;
    color: currentColor;
    width: 1.15em;
    height: 1.15em;
    border: 0.15em solid currentColor;
    border-radius: 0.15em;
    transform: translateY(-0.075em);

    /* To prepare for the pseudo element the display behavior of the input needs to be changed to use grid. */
    display: grid;
    place-content: center;
}

.formControl+.formControl {
    margin-top: 1em;
}

input[type="checkbox"]::before {
    content: "";
    width: 0.65em;
    height: 0.65em;
    transform: scale(0);
    transition: 120ms transform ease-in-out;
    box-shadow: inset 1em 1em var(--formControl-color);

    /* Windows High Contrast Mode */
    background-color: CanvasText;

    /* this re-shapes the default box by using the clip-path property. This property allows us to treat the pseudo element's box similar to a vector element being reshaped with the pen tool. */
    transform-origin: bottom left;
    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
}

input[type="checkbox"]:checked::before {
    transform: scale(1);
}

input[type="checkbox"]:focus {
    outline: max(2px, 0.15em) solid currentColor;
    outline-offset: max(2px, 0.15em);
}

input[type="checkbox"]:disabled {
    --formControl-color: var(--formControl-disabled);

    color: var(--formControl-disabled);
    cursor: not-allowed;
}

.formControl--disabled {
    color: var(--formControl-disabled);
    cursor: not-allowed;
}

.resetBtn {
    background-color: var(--red-500);
}

.saveBtn {
    background-color: var(--green-500);
}

.searchBtn {
    background-color: var(--blue-500);
}